散列表应用了数组支持按照下标随机访问的特性，通过散列函数，将数据的key（关键字）映射到数组下标，使得时间复杂度为0（1）.
散列表的设计包括：
（1）散列函数，简单高效，随机均匀分布
（2）散列冲突解决，简单寻址法，拉链法
简单寻址法：
优势：散列表存储在数组中，可利用CPU缓存优势；序列化简单
劣势：内存利用率较低（数组和链表的一大区别）；装载因子小于1
拉链法：
使用灵活，可用跳表，红黑树代替链表，提高访问效率，解决散列碰撞攻击问题（安全）。
对于数据量小，存储对象小，开放寻址法，大数据量，大对象，拉链法。
（3）装载因子，动态扩容
随着插入数据不断增多，当装载因子过高时，和动态数组一样采用扩容策略，重新申请一个大的内存空间，为提高可用性，并不是一次性将老散列表数据更新到新散列表，而是在插入数据的同时
更新部分老哈希表数据到新哈希表，使得摊还时间复杂度达到0（1），高可用。
